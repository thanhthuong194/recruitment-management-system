components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: "user01"
        username:
          type: string
          minLength: 3
          maxLength: 30
          example: "lethanhthuong"
        email:
          type: string
          format: email
          example: "lethanhthuong19423@gmail.com"
        phone:
          type: string
          pattern: "^(\\+84|0)\\d{9,10}$"
          example: "0123456789"
        fullName:
          type: string
          minLength: 3
          maxLength: 50
          example: "Lê Thanh Thưởng"
        role:
          type: string
          enum: [ADMIN, PERSONNEL MANAGER, RECTOR, UNIT MANAGER]
          example: "RECTOR"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
          example: "ACTIVE"
        isVerified:
          type: boolean
          readOnly: true
          description: Indicates if the user's email is verified
          example: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-10-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2023-10-10T12:00:00Z"
        dateOfBirth:
          type: string
          format: date
          example: "1990-05-15"
        address:
          type: string
          example: "123 Main St, Ho Chi Minh City"
        sex:
          type: string 
          enum: [MALE, FEMALE]
          example: "MALE"
        school:
          type: string
          example: "HCMUTE"
        department:
          type: string
          example: "Computer Science"
        position:
          type: string
          example: "Lecturer"
        CPA:
          type: number
          format: float
          minimum: 0.0
          maximum: 4.0
          example: 3.5
        password:
          type: string
          format: password
          minLength: 8
          example: "lethanhthuong123"
      required:
        - id
        - username
        - email
        - phone
        - fullName
        - role
        - status
        - isVerified
        - createdAt
        - updatedAt
        - dateOfBirth
        - address
        - sex
        - school
        - department
        - position
        - CPA
        - password

    UserBasicInfo:
      type: object
      properties:
        id:
          type: string
          example: "user01"
        username:
          type: string
          example: "lethanhthuong"
        email:
          type: string
          example: "lethanhthuong19423@gmail.com"
        fullName:
          type: string
          example: "Lê Thanh Thưởng"
        role:
          type: string
          example: "RECTOR"
      required:
        - id
        - username
        - email
        - fullName
        - role
        
    LoginRequest:
      type: object
      properties:
        UsernameOrEmail:
          type: string
          example: "lethanhthuong"
        password:
          type: string
          format: password
          example: "lethanhthuong123"
      required:
        - UsernameOrEmail
        - password  

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5"
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          example: 3600
        user:
          $ref: "#/components/schemas/UserBasicInfo"
      required:
        - accessToken
        - tokenType
        - expiresIn
        - user

    ErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: "email"
        issue:
          type: string
          example: "Invalid email format"
      required:
        - field
        - issue

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errorcode:
          type: string
          example: "USER_NOT_FOUND"
        message:
          type: string
          example: "User not found"
        details:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
      required:
        - success
        - errorcode
        - message

    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        fullName:
          type: string  
        role:
          type: string
          enum: [ADMIN, PERSONNEL MANAGER, RECTOR, UNIT MANAGER]
        position:
          type: string
        department:
          type: string
        dateOfBirth:
          type: string
          format: date
        address:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - phone
        - fullName
        - role
        - position
        - department
        - dateOfBirth
        - address
        - password

    UserAdminUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum: [ADMIN, PERSONNEL MANAGER, RECTOR, UNIT MANAGER]
        position:
          type: string
        department:
          type: string
      required:
        - role
        - position
        - department

    UserSelfUpdateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - username
        - email
        - phone
        - address


    PlanCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: "Giảng viên ngành Khoa học máy tính"
        quantity:
          type: integer
          minimum: 1
          example: 3
        jobDescription:
          type: string
          example: "Giảng dạy các môn học lập trình và hướng dẫn đồ án tốt nghiệp."
        requiredCPA:
          type: number
          format: float
          minimum: 0.0
          maximum: 4.0
          example: 3.2
      required:
        - title
        - quantity
        - jobDescription
        - requiredCPA

    PlanResponse:
      type: object
      properties:
        id:
          type: string
          example: "plan-001"
        title:
          type: string
          example: "Giảng viên ngành Khoa học máy tính"
        quantity:
          type: integer
          example: 3
        jobDescription:
          type: string
          example: "Giảng dạy các môn học lập trình và hướng dẫn đồ án tốt nghiệp."
        requiredCPA:
          type: number
          format: float
          example: 3.2
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          example: "PENDING"
        createdBy:
          $ref: "#/components/schemas/UserBasicInfo"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-20T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-22T12:00:00Z"
      required:
        - id
        - title
        - quantity
        - jobDescription
        - requiredCPA
        - status
        - createdBy
        - createdAt
