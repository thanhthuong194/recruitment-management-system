/**
 * Recruitment Management System API
 * API for managing recruitment processes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thanhthuongnlp@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthResponse from '../model/AuthResponse';
import ErrorResponse from '../model/ErrorResponse';
import ForgotPassword200Response from '../model/ForgotPassword200Response';
import ForgotPasswordRequest from '../model/ForgotPasswordRequest';
import LoginRequest from '../model/LoginRequest';
import RefreshToken200Response from '../model/RefreshToken200Response';
import RefreshTokenRequest from '../model/RefreshTokenRequest';
import RegisterRequest from '../model/RegisterRequest';
import RegisterUser201Response from '../model/RegisterUser201Response';
import ResetPasswordRequest from '../model/ResetPasswordRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback module:api/AuthApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot password
     * Send password reset link to user email
     * @param {module:model/ForgotPasswordRequest} forgotPasswordRequest 
     * @param {module:api/AuthApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    forgotPassword(forgotPasswordRequest, callback) {
      let postBody = forgotPasswordRequest;
      // verify the required parameter 'forgotPasswordRequest' is set
      if (forgotPasswordRequest === undefined || forgotPasswordRequest === null) {
        throw new Error("Missing the required parameter 'forgotPasswordRequest' when calling forgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/auth/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/AuthApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User login
     * Authenticate user and return access token
     * @param {module:model/LoginRequest} loginRequest 
     * @param {module:api/AuthApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponse}
     */
    loginUser(loginRequest, callback) {
      let postBody = loginRequest;
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling loginUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthResponse;
      return this.apiClient.callApi(
        '/api/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/AuthApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshToken200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh access token
     * Refresh a new access token using a valid refresh token
     * @param {module:model/RefreshTokenRequest} refreshTokenRequest 
     * @param {module:api/AuthApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshToken200Response}
     */
    refreshToken(refreshTokenRequest, callback) {
      let postBody = refreshTokenRequest;
      // verify the required parameter 'refreshTokenRequest' is set
      if (refreshTokenRequest === undefined || refreshTokenRequest === null) {
        throw new Error("Missing the required parameter 'refreshTokenRequest' when calling refreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshToken200Response;
      return this.apiClient.callApi(
        '/api/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/AuthApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterUser201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * Create a new user account in the system
     * @param {module:model/RegisterRequest} registerRequest 
     * @param {module:api/AuthApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterUser201Response}
     */
    registerUser(registerRequest, callback) {
      let postBody = registerRequest;
      // verify the required parameter 'registerRequest' is set
      if (registerRequest === undefined || registerRequest === null) {
        throw new Error("Missing the required parameter 'registerRequest' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterUser201Response;
      return this.apiClient.callApi(
        '/api/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/AuthApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * Reset user password using reset token
     * @param {module:model/ResetPasswordRequest} resetPasswordRequest 
     * @param {module:api/AuthApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    resetPassword(resetPasswordRequest, callback) {
      let postBody = resetPasswordRequest;
      // verify the required parameter 'resetPasswordRequest' is set
      if (resetPasswordRequest === undefined || resetPasswordRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordRequest' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
