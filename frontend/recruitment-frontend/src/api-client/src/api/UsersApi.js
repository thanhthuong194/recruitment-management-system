/**
 * Recruitment Management System API
 * API for managing recruitment processes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thanhthuongnlp@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ForgotPassword200Response from '../model/ForgotPassword200Response';
import User from '../model/User';
import UserAdminUpdateRequest from '../model/UserAdminUpdateRequest';
import UserBasicInfo from '../model/UserBasicInfo';
import UserCreateRequest from '../model/UserCreateRequest';
import UserSelfUpdateRequest from '../model/UserSelfUpdateRequest';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new user
     * Add a new user to the system (admin only)
     * @param {module:model/UserCreateRequest} userCreateRequest 
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    createUser(userCreateRequest, callback) {
      let postBody = userCreateRequest;
      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserById operation.
     * @callback module:api/UsersApi~deleteUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user by ID
     * Remove a user from the system by their ID
     * @param {String} id 
     * @param {module:api/UsersApi~deleteUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    deleteUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsers operation.
     * @callback module:api/UsersApi~getAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserBasicInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users
     * Retrieve list of all users (basic info only, excluding sensitive data)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number to retrieve in the paginated results.
     * @param {Number} [limit = 10)] The maximum number of items to return per page.
     * @param {module:api/UsersApi~getAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserBasicInfo>}
     */
    getAllUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBasicInfo];
      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyProfile operation.
     * @callback module:api/UsersApi~getMyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get personal profile
     * Retrieve the authenticated user's personal profile
     * @param {module:api/UsersApi~getMyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getMyProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by ID
     * Retrieve detailed information of a specific user by their ID
     * @param {String} id 
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/UsersApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserBasicInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search users
     * Search for users by ID, email, or phone number
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [email] 
     * @param {String} [phone] 
     * @param {module:api/UsersApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserBasicInfo>}
     */
    searchUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'email': opts['email'],
        'phone': opts['phone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserBasicInfo];
      return this.apiClient.callApi(
        '/api/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMyProfile operation.
     * @callback module:api/UsersApi~updateMyProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update personal profile
     * Update user’s own contact info (username, email, phone, address)
     * @param {module:model/UserSelfUpdateRequest} userSelfUpdateRequest 
     * @param {module:api/UsersApi~updateMyProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    updateMyProfile(userSelfUpdateRequest, callback) {
      let postBody = userSelfUpdateRequest;
      // verify the required parameter 'userSelfUpdateRequest' is set
      if (userSelfUpdateRequest === undefined || userSelfUpdateRequest === null) {
        throw new Error("Missing the required parameter 'userSelfUpdateRequest' when calling updateMyProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/users/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserById operation.
     * @callback module:api/UsersApi~updateUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForgotPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user by ID (admin only)
     * Update user's department, position, or role (restricted to admin)
     * @param {String} id 
     * @param {module:model/UserAdminUpdateRequest} userAdminUpdateRequest 
     * @param {module:api/UsersApi~updateUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForgotPassword200Response}
     */
    updateUserById(id, userAdminUpdateRequest, callback) {
      let postBody = userAdminUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserById");
      }
      // verify the required parameter 'userAdminUpdateRequest' is set
      if (userAdminUpdateRequest === undefined || userAdminUpdateRequest === null) {
        throw new Error("Missing the required parameter 'userAdminUpdateRequest' when calling updateUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForgotPassword200Response;
      return this.apiClient.callApi(
        '/api/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
