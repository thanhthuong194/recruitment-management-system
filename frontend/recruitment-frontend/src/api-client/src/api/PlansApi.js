/**
 * Recruitment Management System API
 * API for managing recruitment processes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thanhthuongnlp@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetAllPlans200Response from '../model/GetAllPlans200Response';
import PlanCreateRequest from '../model/PlanCreateRequest';
import PlanResponse from '../model/PlanResponse';
import UpdatePlanStatusRequest from '../model/UpdatePlanStatusRequest';

/**
* Plans service.
* @module api/PlansApi
* @version 1.0.0
*/
export default class PlansApi {

    /**
    * Constructs a new PlansApi. 
    * @alias module:api/PlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRecruitmentPlan operation.
     * @callback module:api/PlansApi~createRecruitmentPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit recruitment plan
     * Allows a Unit Manager to submit a recruitment plan proposal for approval.
     * @param {module:model/PlanCreateRequest} planCreateRequest 
     * @param {module:api/PlansApi~createRecruitmentPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    createRecruitmentPlan(planCreateRequest, callback) {
      let postBody = planCreateRequest;
      // verify the required parameter 'planCreateRequest' is set
      if (planCreateRequest === undefined || planCreateRequest === null) {
        throw new Error("Missing the required parameter 'planCreateRequest' when calling createRecruitmentPlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlanResponse;
      return this.apiClient.callApi(
        '/api/plans/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPlans operation.
     * @callback module:api/PlansApi~getAllPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPlans200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all recruitment plans
     * Retrieve a paginated list of all recruitment plans submitted by unit managers.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number to retrieve in the paginated results.
     * @param {Number} [limit = 10)] The maximum number of items to return per page.
     * @param {String} [sortBy] The field used to sort the results. Supported fields depend on the endpoint (e.g., 'createdAt', 'fullName', 'status').
     * @param {module:model/String} [sortOrder] The order of sorting (ascending or descending).
     * @param {String} [keyword] A general search term to filter resources across common fields (e.g., name, email, title).
     * @param {module:api/PlansApi~getAllPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllPlans200Response}
     */
    getAllPlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'keyword': opts['keyword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPlans200Response;
      return this.apiClient.callApi(
        '/api/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanById operation.
     * @callback module:api/PlansApi~getPlanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plan by ID
     * Retrieve details of a specific recruitment plan.
     * @param {String} id 
     * @param {module:api/PlansApi~getPlanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    getPlanById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlanById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlanResponse;
      return this.apiClient.callApi(
        '/api/plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlanStatus operation.
     * @callback module:api/PlansApi~updatePlanStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update plan status
     * Rector or Personnel Manager updates the status (e.g., APPROVED / REJECTED).
     * @param {String} id 
     * @param {module:model/UpdatePlanStatusRequest} updatePlanStatusRequest 
     * @param {module:api/PlansApi~updatePlanStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    updatePlanStatus(id, updatePlanStatusRequest, callback) {
      let postBody = updatePlanStatusRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePlanStatus");
      }
      // verify the required parameter 'updatePlanStatusRequest' is set
      if (updatePlanStatusRequest === undefined || updatePlanStatusRequest === null) {
        throw new Error("Missing the required parameter 'updatePlanStatusRequest' when calling updatePlanStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlanResponse;
      return this.apiClient.callApi(
        '/api/plans/{id}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
