/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AuthResponse;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.ForgotPassword200Response;
import org.openapitools.model.ForgotPasswordRequest;
import org.openapitools.model.LoginRequest;
import org.openapitools.model.RefreshToken200Response;
import org.openapitools.model.RefreshTokenRequest;
import org.openapitools.model.RegisterRequest;
import org.openapitools.model.RegisterUser201Response;
import org.openapitools.model.ResetPasswordRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-28T11:03:36.438763291+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "Auth", description = "Endpoints for user authentication and authorization.")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_FORGOT_PASSWORD = "/api/auth/forgot-password";
    /**
     * POST /api/auth/forgot-password : Forgot password
     * Send password reset link to user email
     *
     * @param forgotPasswordRequest  (required)
     * @return Successful response (200 OK) (status code 200)
     */
    @Operation(
        operationId = "forgotPassword",
        summary = "Forgot password",
        description = "Send password reset link to user email",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response (200 OK)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForgotPassword200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_FORGOT_PASSWORD,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ForgotPassword200Response> forgotPassword(
        @Parameter(name = "ForgotPasswordRequest", description = "", required = true) @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"{}\", \"success\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_LOGIN_USER = "/api/auth/login";
    /**
     * POST /api/auth/login : User login
     * Authenticate user and return access token
     *
     * @param loginRequest  (required)
     * @return Login successful (status code 200)
     *         or Unauthorized (401 Unauthorized) (status code 401)
     */
    @Operation(
        operationId = "loginUser",
        summary = "User login",
        description = "Authenticate user and return access token",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (401 Unauthorized)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_LOGIN_USER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthResponse> loginUser(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 3600, \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5\", \"tokenType\" : \"Bearer\", \"user\" : { \"role\" : \"RECTOR\", \"fullName\" : \"Lê Thanh Thưởng\", \"id\" : \"user01\", \"email\" : \"lethanhthuong19423@gmail.com\", \"username\" : \"lethanhthuong\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"details\" : [ { \"field\" : \"email\", \"issue\" : \"Invalid email format\" }, { \"field\" : \"email\", \"issue\" : \"Invalid email format\" } ], \"message\" : \"User not found\", \"errorcode\" : \"USER_NOT_FOUND\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_REFRESH_TOKEN = "/api/auth/refresh";
    /**
     * POST /api/auth/refresh : Refresh access token
     * Refresh a new access token using a valid refresh token
     *
     * @param refreshTokenRequest  (required)
     * @return New access token generated successfully (status code 200)
     *         or Unauthorized (401 Unauthorized) (status code 401)
     */
    @Operation(
        operationId = "refreshToken",
        summary = "Refresh access token",
        description = "Refresh a new access token using a valid refresh token",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "New access token generated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RefreshToken200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (401 Unauthorized)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_REFRESH_TOKEN,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RefreshToken200Response> refreshToken(
        @Parameter(name = "RefreshTokenRequest", description = "", required = true) @Valid @RequestBody RefreshTokenRequest refreshTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 0, \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"details\" : [ { \"field\" : \"email\", \"issue\" : \"Invalid email format\" }, { \"field\" : \"email\", \"issue\" : \"Invalid email format\" } ], \"message\" : \"User not found\", \"errorcode\" : \"USER_NOT_FOUND\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_REGISTER_USER = "/api/auth/register";
    /**
     * POST /api/auth/register : Register a new user
     * Create a new user account in the system
     *
     * @param registerRequest  (required)
     * @return Resource created successfully (201 Created) (status code 201)
     *         or Bad request (400 Bad Request) (status code 400)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        description = "Create a new user account in the system",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Resource created successfully (201 Created)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegisterUser201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request (400 Bad Request)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_REGISTER_USER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RegisterUser201Response> registerUser(
        @Parameter(name = "RegisterRequest", description = "", required = true) @Valid @RequestBody RegisterRequest registerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"{}\", \"success\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"details\" : [ { \"field\" : \"email\", \"issue\" : \"Invalid email format\" }, { \"field\" : \"email\", \"issue\" : \"Invalid email format\" } ], \"message\" : \"User not found\", \"errorcode\" : \"USER_NOT_FOUND\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_RESET_PASSWORD = "/api/auth/reset-password";
    /**
     * POST /api/auth/reset-password : Reset password
     * Reset user password using reset token
     *
     * @param resetPasswordRequest  (required)
     * @return Successful response (200 OK) (status code 200)
     *         or Bad request (400 Bad Request) (status code 400)
     */
    @Operation(
        operationId = "resetPassword",
        summary = "Reset password",
        description = "Reset user password using reset token",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response (200 OK)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForgotPassword200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request (400 Bad Request)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ApiApi.PATH_RESET_PASSWORD,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ForgotPassword200Response> resetPassword(
        @Parameter(name = "ResetPasswordRequest", description = "", required = true) @Valid @RequestBody ResetPasswordRequest resetPasswordRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"{}\", \"success\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"details\" : [ { \"field\" : \"email\", \"issue\" : \"Invalid email format\" }, { \"field\" : \"email\", \"issue\" : \"Invalid email format\" } ], \"message\" : \"User not found\", \"errorcode\" : \"USER_NOT_FOUND\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
